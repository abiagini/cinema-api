<?php

namespace Tests\Feature\Movies;

use App\Models\Movie;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Passport\Passport;
use Tests\TestCase;

final class UpdateMovieTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $movie;
    protected $movieTitle;
    protected $movieDescription;
    protected $movieRating;
    protected $movieImageUrl;

    /**
     * @return int
     */
    public function invalidRating(): int
    {
        $invalidRating = Movie::MIN_RATING;
        while ($invalidRating >= Movie::MIN_RATING && $invalidRating <= Movie::MAX_RATING) {
            $invalidRating = rand();
        }
        return $invalidRating;
    }

    /**
     * @return int
     */
    public function inesistentMovieId(): int
    {
        $insistentMovieId = 0;
        while ($insistentMovieId == $this->movie->id) {
            $insistentMovieId = rand();
        }
        return $insistentMovieId;
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Passport::actingAs(
            factory(User::class)->create()
        );

        $this->movie            = factory(Movie::class)->create();
        $this->movieTitle       = $this->faker->sentence;
        $this->movieDescription = $this->faker->paragraph;
        $this->movieRating      = $this->faker->numberBetween(Movie::MIN_RATING, Movie::MAX_RATING);
        $this->movieImageUrl    = $this->faker->imageUrl();
    }

    /** @test */
    public function it_should_update_a_movie()
    {
        $response = $this->putJson('api/movies/' . $this->movie->id, [
            'title'       => $this->movieTitle,
            'description' => $this->movieDescription,
            'rating'      => $this->movieRating,
            'image_url'   => $this->movieImageUrl,
        ]);

        $response->assertStatus(204)->assertNoContent();

        $this->assertDatabaseHas(Movie::TABLE, [
            'title'       => $this->movieTitle,
            'description' => $this->movieDescription,
            'rating'      => $this->movieRating,
            'image_url'   => $this->movieImageUrl,
        ]);
    }

    /** @test */
    public function it_should_update_a_movie_title()
    {
        $response = $this->putJson('api/movies/' . $this->movie->id, [
            'title' => $this->movieTitle
        ]);

        $response->assertStatus(204)->assertNoContent();

        $this->assertDatabaseHas(Movie::TABLE, [
            'title'       => $this->movieTitle,
            'description' => $this->movie->description,
            'rating'      => $this->movie->rating,
            'image_url'   => $this->movie->image_url,
        ]);
    }

    /** @test */
    public function it_should_update_a_movie_description()
    {
        $response = $this->putJson('api/movies/' . $this->movie->id, [
            'description' => $this->movieDescription,
        ]);

        $response->assertStatus(204)->assertNoContent();

        $this->assertDatabaseHas(Movie::TABLE, [
            'title'       => $this->movie->title,
            'description' => $this->movieDescription,
            'rating'      => $this->movie->rating,
            'image_url'   => $this->movie->image_url,
        ]);
    }

    /** @test */
    public function it_should_update_a_movie_rating()
    {
        $response = $this->putJson('api/movies/' . $this->movie->id, [
            'rating' => $this->movieRating,
        ]);

        $response->assertStatus(204)->assertNoContent();

        $this->assertDatabaseHas(Movie::TABLE, [
            'title'       => $this->movie->title,
            'description' => $this->movie->description,
            'rating'      => $this->movieRating,
            'image_url'   => $this->movie->image_url,
        ]);
    }

    /** @test */
    public function it_should_update_a_movie_image_url()
    {
        $response = $this->putJson('api/movies/' . $this->movie->id, [
            'image_url' => $this->movieImageUrl
        ]);

        $response->assertStatus(204)->assertNoContent();

        $this->assertDatabaseHas(Movie::TABLE, [
            'title'       => $this->movie->title,
            'description' => $this->movie->description,
            'rating'      => $this->movie->rating,
            'image_url'   => $this->movieImageUrl,
        ]);
    }

    /** @test */
    public function request_should_fail_when_a_invalid_rating_is_provided()
    {
        $invalidRating = $this->invalidRating();

        $response = $this->putJson('api/movies/' . $this->movie->id, [
            'rating' => $invalidRating
        ]);

        $response->assertStatus(422)
            ->assertJsonValidationErrors('rating');


        $this->assertDatabaseMissing(Movie::TABLE, [
            'rating' => $invalidRating
        ]);
    }

    /** @test */
    public function request_should_fail_when_invalid_url_is_provided()
    {
        $invalidImageUrl = $this->faker->sentence;

        $response = $this->putJson('api/movies/' . $this->movie->id, [
            'image_url' => $invalidImageUrl,
        ]);

        $response->assertStatus(422)
            ->assertJsonValidationErrors('image_url');

        $this->assertDatabaseMissing(Movie::TABLE, [
            'image_url' => $invalidImageUrl,
        ]);
    }

    /** @test */
    public function it_should_throw_404_when_triying_to_update_an_inexistent_movie()
    {
        $insistentMovieId = $this->inesistentMovieId();

        $response = $this->putJson('api/movies/' . $insistentMovieId, []);

        $response->assertStatus(404);
    }

}

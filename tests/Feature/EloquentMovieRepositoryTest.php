<?php

namespace Tests\Feature;

use App\Models\Movie;
use App\Repositories\Movies\EloquentMovieRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class EloquentMovieRepositoryTest extends TestCase
{
    use RefreshDatabase;

    protected $repository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = new EloquentMovieRepository();
    }

    /** @test */
    public function it_should_save_a_movie()
    {
        $movie = factory(Movie::class)->make();

        $this->repository->save($movie);

        $this->assertDatabaseCount(Movie::TABLE, 1)
            ->assertDatabaseHas(Movie::TABLE, $movie->toArray());
    }

    /** @test */
    public function it_should_return_a_collection_of_movies()
    {
        $totalMovies = 10;
        factory(Movie::class, $totalMovies)->create();

        $movies = $this->repository->all();

        $this->assertEquals($totalMovies, $movies->count());
    }

    /** @test */
    public function it_should_find_a_movie()
    {
        $movie = factory(Movie::class)->create();

        $wantedMovie = $this->repository->find($movie->id);

        $this->assertEquals($movie->toArray(), $wantedMovie->toArray());
    }

    /** @test */
    public function it_should_return_null_when_searching_for_a_movie_with_a_non_existing_id()
    {
        $movie = $this->repository->find(rand(0, 100));

        $this->assertNull($movie);
    }

    /** @test */
    public function it_should_delete_a_movie()
    {
        $movie = factory(Movie::class)->create();

        $this->repository->delete($movie);

        $this->assertDatabaseCount(Movie::TABLE, 0)
            ->assertDatabaseMissing(Movie::TABLE, $movie->toArray());
    }

}
